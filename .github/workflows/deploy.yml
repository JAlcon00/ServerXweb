name: Deploy Infrastructure

on:
  workflow_dispatch:
  push:
    branches: 
      - main
    paths:
      - '**.tf'
      - 'node-install.sh'
      - '.github/workflows/**'

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.SPACES_ACCESS_KEY }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.SPACES_SECRET_KEY }}
  TF_VAR_DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_TOKEN }}
  TF_VAR_PRIVATE_KEY_PATH: "./keys/serverxweb"
  TF_VAR_SSH_KEY_ID: ${{ secrets.SSH_KEY_ID }}

jobs:
  terraform-apply:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.8
          terraform_wrapper: false
          
      - name: Clean Terraform State
        run: |
          rm -rf .terraform
          rm -f .terraform.lock.hcl
          rm -f terraform.tfstate*
          
      - name: Configure SSH keys
        run: |
          mkdir -p ./keys
          if [ -z "${{ secrets.SSH_PUBLIC_KEY }}" ]; then
            echo "Error: SSH_PUBLIC_KEY está vacío"
            exit 1
          fi
          echo -n "${{ secrets.SSH_PUBLIC_KEY }}" > ./keys/serverxweb.pub
          echo "" >> ./keys/serverxweb.pub
          echo -n "${{ secrets.SSH_PRIVATE_KEY }}" > ./keys/serverxweb
          echo "" >> ./keys/serverxweb
          chmod 600 ./keys/serverxweb
          chmod 644 ./keys/serverxweb.pub
          
          if ! grep -q "^ssh-rsa" ./keys/serverxweb.pub; then
            echo "Error: Formato de clave pública inválido"
            exit 1
          fi

      - name: Setup SSH Config
        run: |
          mkdir -p ~/.ssh
          echo "Host *
            StrictHostKeyChecking no
            UserKnownHostsFile /dev/null
          " > ~/.ssh/config

      - name: Initialize Terraform
        run: terraform init -reconfigure
        env:
          TF_LOG: DEBUG

      - name: Plan Terraform Changes
        run: terraform plan -out=tfplan
        env:
          TF_LOG: DEBUG

      - name: Apply Terraform Changes
        run: terraform apply -auto-approve tfplan
        env:
          TF_LOG: DEBUG

      - name: Wait for Droplet Initialization
        id: wait-droplet
        run: |
          echo "Esperando que el Droplet se inicialice..."
          DROPLET_IP=$(terraform output -raw droplet_ip)
          echo "droplet_ip=${DROPLET_IP}" >> $GITHUB_OUTPUT
          
          for i in {1..20}; do  # Aumentando los intentos a 20
            if nc -z -w5 $DROPLET_IP 22; then
              echo "Puerto SSH disponible"
              sleep 15
              break
            fi
            echo "Intento $i: Esperando puerto SSH..."
            sleep 15
          done

      - name: Copy node-install.sh to server
        uses: appleboy/scp-action@v0.1.0
        with:
          host: ${{ steps.wait-droplet.outputs.droplet_ip }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "node-install.sh"
          target: "/tmp/node-install.sh"

      - name: Run node-install.sh on server
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ steps.wait-droplet.outputs.droplet_ip }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            chmod +x /tmp/node-install.sh
            /tmp/node-install.sh

      - name: Verify Node.js Installation
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ steps.wait-droplet.outputs.droplet_ip }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            echo "Verificando Node.js..."
            command -v node >/dev/null 2>&1 || { echo "Node.js no instalado"; exit 1; }
            command -v npm >/dev/null 2>&1 || { echo "npm no instalado"; exit 1; }
            command -v pm2 >/dev/null 2>&1 || { echo "PM2 no instalado"; exit 1; }

      - name: Deploy Application
        if: success()
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ steps.wait-droplet.outputs.droplet_ip }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            mkdir -p /var/www/app
            cd /var/www/app
            rm -rf *
            git clone https://github.com/${{ github.repository }} .
            npm ci --only=production
            echo "${{ secrets.ENV_FILE }}" > .env
            pm2 delete backstore 2>/dev/null || true
            pm2 start src/server.js --name backstore
            pm2 save

      - name: Verify Deployment
        if: success()
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ steps.wait-droplet.outputs.droplet_ip }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            if ! pm2 list | grep -q "online.*backstore"; then
              echo "Error: La aplicación no está ejecutándose"
              pm2 logs backstore --lines 20
              exit 1
            fi
            echo "Aplicación desplegada exitosamente"

      - name: Output Success
        run: |
          echo "Despliegue completado exitosamente"
          echo "IP del servidor: ${{ steps.wait-droplet.outputs.droplet_ip }}"
