name: Deploy Infrastructure
#EFE
on:
  workflow_dispatch:
  push:
    branches: [main]

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.SPACES_ACCESS_KEY }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.SPACES_SECRET_KEY }}
  TF_VAR_DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_TOKEN }}
  TF_VAR_PRIVATE_KEY_PATH: "~/.ssh/serverxweb"
  TF_VAR_SSH_KEY_ID: ${{ secrets.SSH_KEY_ID }}
  TF_VAR_SPACES_ACCESS_KEY: ${{ secrets.SPACES_ACCESS_KEY }}
  TF_VAR_SPACES_SECRET_KEY: ${{ secrets.SPACES_SECRET_KEY }}

jobs:
  terraform:
    name: Terraform Deploy
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout del repositorio
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Verificar Docker
      - name: Check Docker
        run: |
          if ! command -v docker &> /dev/null; then
            echo "Docker no está instalado"
            exit 1
          fi
          docker --version

      # 3. Cache para Docker Buildx
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # 4. Configurar Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 5. Instalar dependencias
      - name: Install dependencies
        run: |
          sudo apt-get update || (sleep 10 && sudo apt-get update)
          sudo apt-get install -y unzip

      # 6. Configurar Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.9.8"

      # 7. Configurar SSH key
      - name: Configure SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/serverxweb
          chmod 600 ~/.ssh/serverxweb

      # 8. Inicializar Terraform
      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="access_key=${{ secrets.SPACES_ACCESS_KEY }}" \
            -backend-config="secret_key=${{ secrets.SPACES_SECRET_KEY }}" \
            -backend-config="region=nyc3" \
            -backend-config="skip_credentials_validation=true" \
            -backend-config="skip_metadata_api_check=true"

      - name: Verify Variables
        run: |
            echo "Verificando SSH_KEY_ID..."
            SSH_KEY_VALUE="${{ secrets.SSH_KEY_ID }}"
              
            # Verificar que no esté vacío
              if [ -z "$SSH_KEY_VALUE" ]; then
                echo "❌ Error: SSH_KEY_ID está vacío"
                exit 1
              fi
              
            # Verificar que sea numérico
              if ! [[ "$SSH_KEY_VALUE" =~ ^[0-9]+$ ]]; then
                echo "❌ Error: SSH_KEY_ID debe ser un número, valor actual: $SSH_KEY_VALUE"
                exit 1
              fi
              
              echo "✅ SSH_KEY_ID es válido"

      # 9. Terraform Plan
      - name: Terraform Plan
        run: |
          terraform plan \
            -var="DIGITALOCEAN_TOKEN=${{ secrets.DIGITALOCEAN_TOKEN }}" \
            -var="SSH_KEY_ID=$(echo ${{ secrets.SSH_KEY_ID }} | tr -d '"')" \
            -var="PRIVATE_KEY_PATH=~/.ssh/serverxweb" \
            -out=tfplan

      # 10. Terraform Apply
      - name: Terraform Apply
        run: |
          terraform apply -auto-approve tfplan || {
            if [ -f "errored.tfstate" ]; then
              echo "Intentando recuperar el estado..."
              terraform state push errored.tfstate
              terraform apply -auto-approve
            else
              exit 1
            fi
          }
      # 11. Login a Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 12. Construir y publicar imagen Docker
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/backstore:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/backstore:${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      # 13. Desplegar en Droplet
      - name: Deploy to Droplet
        run: |
          DROPLET_IP=$(terraform output -raw droplet_ip)
          echo "Desplegando en $DROPLET_IP"
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/serverxweb root@$DROPLET_IP << 'EOF'
            cd /var/www/app
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/backstore:latest
            docker stop backend || true
            docker rm backend || true
            docker run -d \
              --name backend \
              -p 3000:3000 \
              -e NODE_ENV=production \
              ${{ secrets.DOCKERHUB_USERNAME }}/backstore:latest
          EOF

      # 14. Notificaciones
      - name: Notify on success
        if: success()
        run: echo "✅ Despliegue completado exitosamente"

      - name: Notify on failure
        if: failure()
        run: echo "❌ El despliegue falló"

      # 15. Limpieza de cache
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
