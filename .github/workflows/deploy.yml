name: Deploy Infrastructure

on:
  workflow_dispatch:
  push:
    branches: 
      - main

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.SPACES_ACCESS_KEY }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.SPACES_SECRET_KEY }}
  TF_VAR_DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_TOKEN }}
  TF_VAR_PRIVATE_KEY_PATH: "./keys/serverxweb"
  TF_VAR_SSH_KEY_ID: ${{ secrets.SSH_KEY_ID }}
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

jobs:
  terraform-apply:
    runs-on: ubuntu-latest
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.8
          terraform_wrapper: false

      - name: Clean Terraform State
        run: |
          rm -f .terraform/terraform.tfstate*
          rm -f terraform.tfstate*
          rm -rf .terraform

      - name: Configure SSH keys
        run: |
          mkdir -p ./keys
          if [ -z "${{ secrets.SSH_PUBLIC_KEY }}" ]; then
            echo "Error: SSH_PUBLIC_KEY está vacío"
            exit 1
          fi
          echo -n "${{ secrets.SSH_PUBLIC_KEY }}" > ./keys/serverxweb.pub
          echo "" >> ./keys/serverxweb.pub
          echo -n "${{ secrets.SSH_PRIVATE_KEY }}" > ./keys/serverxweb
          echo "" >> ./keys/serverxweb
          chmod 600 ./keys/serverxweb
          chmod 644 ./keys/serverxweb.pub

      - name: Terraform Init
        run: |
          echo "Iniciando Terraform..."
          terraform init -reconfigure
        env:
          TF_LOG: DEBUG

      - name: Terraform Plan
        run: |
          echo "Generando plan de Terraform..."
          terraform plan -out=tfplan || (
            echo "Error en Plan. Intentando limpiar recursos..."
            terraform destroy -auto-approve
            exit 1
          )
        env:
          TF_LOG: DEBUG

      - name: Terraform Apply
        run: |
          echo "Aplicando configuración de Terraform..."
          terraform apply -auto-approve tfplan || (
            echo "Error en Apply. Limpiando recursos..."
            terraform destroy -auto-approve
            exit 1
          )
        env:
          TF_LOG: DEBUG

      - name: Wait for Droplet
        run: |
          echo "Esperando 180 segundos para la inicialización completa..."
          sleep 180

      - name: Get Droplet IP
        id: droplet-ip
        run: |
          DROPLET_IP=$(terraform output -raw droplet_ip)
          echo "droplet_ip=${DROPLET_IP}" >> $GITHUB_OUTPUT
          echo "IP del Droplet: ${DROPLET_IP}"

      - name: Test SSH Connection
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ steps.droplet-ip.outputs.droplet_ip }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "Verificando script de instalación..."
            if [ -f /root/node-install.sh ]; then
              echo "Ejecutando script de instalación..."
              chmod +x /root/node-install.sh
              /root/node-install.sh
            else
              echo "Error: Script de instalación no encontrado"
              exit 1
            fi

            # Verificar instalaciones
            echo "Verificando Node.js..."
            node --version || exit 1
            echo "Verificando npm..."
            npm --version || exit 1
            echo "Verificando PM2..."
            pm2 --version || exit 1

      - name: Deploy Application
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ steps.droplet-ip.outputs.droplet_ip }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Asegurarse de que Node.js está instalado
            if ! command -v node &> /dev/null; then
              echo "Error: Node.js no está instalado"
              exit 1
            fi

      - name: Verify Deployment
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ steps.droplet-ip.outputs.droplet_ip }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "Verificando estado de la aplicación..."
            pm2 list
            pm2 logs backstore --lines 10

      - name: Output Success
        run: |
          echo "Despliegue completado exitosamente"
          echo "IP del servidor: ${{ steps.droplet-ip.outputs.droplet_ip }}"