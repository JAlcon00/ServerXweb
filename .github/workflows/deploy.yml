name: Deploy Infrastructure

on:
  workflow_dispatch:
  push:
    branches: 
      - main

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.SPACES_ACCESS_KEY }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.SPACES_SECRET_KEY }}
  TF_VAR_DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_TOKEN }}
  TF_VAR_PRIVATE_KEY_PATH: "./keys/serverxweb"
  TF_VAR_SSH_KEY_ID: ${{ secrets.SSH_KEY_ID }}
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

jobs:
  terraform-apply:
    runs-on: ubuntu-latest
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.8
          terraform_wrapper: false
      # XD
      - name: Configure SSH keys
        run: |
          # Crear directorio
          mkdir -p ./keys
          
          # Debug: Verificar que el secreto no esté vacío
          if [ -z "${{ secrets.SSH_PUBLIC_KEY }}" ]; then
            echo "Error: SSH_PUBLIC_KEY está vacío"
            exit 1
          fi
          
          # Guardar la clave pública asegurando que termine en nueva línea
          echo -n "${{ secrets.SSH_PUBLIC_KEY }}" > ./keys/serverxweb.pub
          echo "" >> ./keys/serverxweb.pub
          
          # Guardar la clave privada
          echo -n "${{ secrets.SSH_PRIVATE_KEY }}" > ./keys/serverxweb
          echo "" >> ./keys/serverxweb
          
          # Establecer permisos
          chmod 600 ./keys/serverxweb
          chmod 644 ./keys/serverxweb.pub
          
          # Debug: Mostrar contenido de la clave pública (primeros caracteres)
          echo "Contenido inicial de la clave pública:"
          head -c 50 ./keys/serverxweb.pub
          
          # Debug: Verificar formato
          if ! grep -q "^ssh-rsa" ./keys/serverxweb.pub; then
            echo "Error: La clave pública no comienza con ssh-rsa"
            exit 1
          fi
          
          # Verificar que sea una clave válida
          if ! ssh-keygen -lf ./keys/serverxweb.pub; then
            echo "Error: Formato de clave pública inválido"
            echo "Contenido completo del archivo:"
            cat ./keys/serverxweb.pub
            exit 1
          fi

      - name: Verify SSH keys exist
        run: |
          if [ ! -s ./keys/serverxweb.pub ]; then
            echo "Error: La clave pública está vacía"
            echo "Contenido del directorio keys:"
            ls -la ./keys/
            exit 1
          fi
          
          if ! grep -q "ssh-rsa" ./keys/serverxweb.pub; then
            echo "Error: La clave pública no parece tener el formato correcto"
            exit 1
          fi

      - name: Setup SSH config
        run: |
          mkdir -p ~/.ssh
          echo "Host *
            StrictHostKeyChecking no
            UserKnownHostsFile /dev/null
          " > ~/.ssh/config

      - name: Terraform Init
        run: |
          echo "Iniciando Terraform..."
          terraform init
        env:
          TF_LOG: DEBUG

      - name: Terraform Format
        run: |
         echo "Formateando archivos de Terraform..."
          terraform fmt
          if [ $? -eq 0 ]; then
            echo "Archivos formateados correctamente"
          else
            echo "Error al formatear archivos"
            exit 1
          fi

      - name: Terraform Validate
        run: |
          echo "Validando configuración de Terraform..."
          terraform validate

      - name: Terraform Plan
        run: |
          echo "Generando plan de Terraform..."
          terraform plan -out=tfplan
        env:
          TF_LOG: DEBUG

      - name: Terraform Apply
        run: |
          echo "Aplicando configuración de Terraform..."
          terraform apply -auto-approve tfplan
        env:
          TF_LOG: DEBUG

      - name: Wait for Droplet
        run: |
          echo "Esperando 60 segundos para que el Droplet se inicialice completamente..."
          sleep 60

      - name: Get Droplet IP
        id: droplet-ip
        run: |
          DROPLET_IP=$(terraform output -raw droplet_ip)
          echo "droplet_ip=${DROPLET_IP}" >> $GITHUB_OUTPUT
          echo "IP del Droplet: ${DROPLET_IP}"

      - name: Test SSH Connection
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ steps.droplet-ip.outputs.droplet_ip }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "Conexión SSH exitosa"
            echo "Verificando sistema..."
            uname -a
            echo "Verificando instalación de Node.js..."
            node --version
            npm --version
            echo "Verificando instalación de PM2..."
            pm2 --version

      - name: Deploy Application
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ steps.droplet-ip.outputs.droplet_ip }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "Iniciando despliegue de la aplicación..."
            cd /var/www/app
            echo "Limpiando directorio..."
            rm -rf *
            echo "Clonando repositorio..."
            git clone https://github.com/${{ github.repository }} .
            echo "Instalando dependencias..."
            npm install
            echo "Configurando variables de entorno..."
            echo "${{ secrets.ENV_FILE }}" > .env
            echo "Iniciando aplicación con PM2..."
            pm2 start src/server.js --name "backstore"
            pm2 save

      - name: Verify Deployment
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ steps.droplet-ip.outputs.droplet_ip }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "Verificando estado de la aplicación..."
            pm2 list
            pm2 logs backstore --lines 10

      - name: Output Success
        run: |
          echo "Despliegue completado exitosamente"
          echo "IP del servidor: ${{ steps.droplet-ip.outputs.droplet_ip }}"