name: Deploy Infrastructure

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  terraform:
    name: Terraform Deploy
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout del repositorio
      - name: Checkout repository
        uses: actions/checkout@v2

      # 2. Verificar Docker
      - name: Check Docker
        run: |
          if ! command -v docker &> /dev/null; then
            echo "Docker no está instalado"
            exit 1
          fi
          docker --version

      # 3. Cache para Docker Buildx
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # 4. Configurar Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # 5. Instalar dependencias necesarias
      - name: Install dependencies
        run: |
          sudo apt-get update || (sleep 10 && sudo apt-get update)
          sudo apt-get install -y unzip

      # 6. Configurar Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.3.0  # Asegúrate de usar una versión compatible

      # 7. Configurar SSH key
      - name: Configure SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/serverxweb
          chmod 600 ~/.ssh/serverxweb

      # 8. Inicializar Terraform
      - name: Terraform Init
        env:
          TF_VAR_digitalocean_token: ${{ secrets.DIGITALOCEAN_TOKEN }}
        run: |
          terraform init \
            -backend-config="access_key=${{ secrets.SPACES_ACCESS_KEY }}" \
            -backend-config="secret_key=${{ secrets.SPACES_SECRET_KEY }}" \
            -backend-config="region=us-east-1"  # Asegúrate de que la región sea correcta

      # 9. Terraform Plan
      - name: Terraform Plan
        env:
          DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_TOKEN }}
        run: |
          terraform plan \
            -var="digitalocean_token=${{ secrets.DIGITALOCEAN_TOKEN }}" \
            -var="spaces_access_key=${{ secrets.SPACES_ACCESS_KEY }}" \
            -var="spaces_secret_key=${{ secrets.SPACES_SECRET_KEY }}" \
            -var="ssh_key_id=${{ secrets.SSH_KEY_ID }}" \
            -var="private_key_path=~/.ssh/serverxweb" \
            -out=tfplan

      # 10. Terraform Apply
      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        env:
          DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_TOKEN }}

      # 11. Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 12. Construir y publicar imagen Docker
      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/backstore:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/backstore:${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      # 13. Desplegar la aplicación en el Droplet
      - name: Deploy application
        run: |
          DROPLET_IP=$(terraform output -raw droplet_ip)
          DOCKER_IMAGE="${{ secrets.DOCKERHUB_USERNAME }}/backstore:latest"
          ssh -o StrictHostKeyChecking=no root@$DROPLET_IP << EOF
            docker pull ${DOCKER_IMAGE}
            docker stop backend || true
            docker rm backend || true
            docker run -d --name backend \
              -p 3000:3000 \
              ${DOCKER_IMAGE}
          EOF

      # 14. Notificaciones de éxito y fallo
      - name: Notify on success
        if: success()
        run: |
          echo "Deployment successful!"

      - name: Notify on failure
        if: failure()
        run: |
          echo "Deployment failed!"

      # 15. Limpieza de cache
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache